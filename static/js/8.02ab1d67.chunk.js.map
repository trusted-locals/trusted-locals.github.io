{"version":3,"sources":["features/user/Profile.tsx"],"names":["Profile","dispatch","useDispatch","ownUsername","useSelector","selectOwnUsername","history","useHistory","userNameParam","location","pathname","split","isOwnProfile","profileSelector","selectOwnProfile","selectOtherProfile","profile","posts","state","selectPostsByIDs","postIDs","useEffect","requestedPostsOfUser","openedOtherProfile","username","responsiveBoxProps","alignItems","display","flexDirection","marginTop","size","name","src","imageURL","color","fontWeight","firstName","lastName","cityName","justifyContent","marginRight","textAlign","postsCount","rating","borderColor","gridTemplateColumns","gridGap","Object","values","map","post","key","postID","detailViewRedirectToProfile"],"mappings":"0IAAA,6JAoBaA,EAAkB,WAAO,IAAD,MAC7BC,EAAWC,cAEXC,EAA6BC,YAAYC,KAEzCC,EAAUC,cAEVC,EAAoCF,EAAQG,SAASC,SAASC,MAAM,aAAa,GACjFC,EAAeT,IAAgBK,GAAmC,OAAlBA,EAEhDK,EAAkBD,EAAeE,IAAmBC,IACpDC,EAAO,oBAAGZ,YAAYS,UAAf,aAAG,EAA8BG,eAAjC,QAA4C,KACnDC,EAAQb,aAAY,SAACc,GAAD,aAAsBC,YAAiBD,EAAD,iBAAQF,QAAR,IAAQA,OAAR,EAAQA,EAASI,eAAjB,QAA4B,OAa5F,OAXAC,qBAAU,WACRpB,EAASqB,YAAqB,CAAEV,eAAcJ,cAAa,OAAEA,QAAF,IAAEA,IAAiB,QAE7E,IAEHa,qBAAU,WACHL,GACHf,EAASsB,YAAmB,CAAEC,SAAUhB,OAEzC,CAACQ,IAECA,EAMH,kBAAC,IAAQS,IACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,WAAW,SAASC,QAAQ,OAAOC,cAAc,SAASC,UAAW,GACxE,kBAAC,IAAD,CAAQC,KAAK,KAAKC,KAAMf,EAAQQ,SAAUQ,IAAG,UAAEhB,EAAQiB,gBAAV,QAAsB,KACnE,kBAAC,IAAD,CAAMC,MAAM,WAAWC,WAAW,WAAWN,UAAW,GACrDb,EAAQoB,UAAR,UAAuBpB,EAAQoB,UAA/B,YAA4CpB,EAAQqB,UAAarB,EAAQQ,UAE5E,kBAAC,IAAD,CAAMU,MAAM,YAAYlB,EAAQsB,WAElC,kBAAC,IAAD,CAAKJ,MAAM,WAAWP,QAAQ,OAAOY,eAAe,SAASV,UAAW,GACtE,kBAAC,IAAD,CAAKW,YAAa,GAChB,kBAAC,IAAD,CAAMC,UAAU,UAAUzB,EAAQ0B,YAClC,kBAAC,IAAD,eAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMD,UAAU,UAAUzB,EAAQ2B,QAClC,kBAAC,IAAD,kBAIN,kBAAC,IAAD,CAASC,YAAY,aAErB,kBAAC,IAAD,CACEjB,QAAQ,OACRkB,oBAAqB,CAAC,OAAQ,iBAAkB,iBAAkB,kBAClEC,QAAS,EACTjB,UAAW,GAEVkB,OAAOC,OAAO/B,GACZgC,KAAI,qBAAGC,QACPD,KAAI,SAACC,GAAD,OAAUA,GAAQ,kBAAC,IAAD,eAAMC,IAAKD,EAAKE,QAAYF,EAA5B,CAAkCG,6BAA2B,SAGvFzC,IAAgB,GArCZ","file":"static/js/8.02ab1d67.chunk.js","sourcesContent":["import React, { FC, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Avatar, Box, Button, Divider, Text } from '@chakra-ui/core';\n\nimport { selectPostsByIDs } from '../feed/feedSlice';\nimport { Post } from '../feed/Post';\nimport {\n  loggedOut,\n  openedOtherProfile,\n  requestedPostsOfUser,\n  selectOtherProfile,\n  selectOwnProfile,\n  selectOwnUsername,\n} from './userSlice';\n\nimport { responsiveBoxProps } from '../../app/styles';\n\nimport { RootState } from '../../app/store';\n\nexport const Profile: FC<{}> = () => {\n  const dispatch = useDispatch();\n\n  const ownUsername: string | null = useSelector(selectOwnUsername);\n\n  const history = useHistory();\n  // TODO: Refactor\n  const userNameParam: string | undefined = history.location.pathname.split('/profile/')[1];\n  const isOwnProfile = ownUsername === userNameParam || userNameParam === 'me';\n\n  const profileSelector = isOwnProfile ? selectOwnProfile : selectOtherProfile;\n  const profile = useSelector(profileSelector)?.profile ?? null;\n  const posts = useSelector((state: RootState) => selectPostsByIDs(state, profile?.postIDs ?? []));\n\n  useEffect(() => {\n    dispatch(requestedPostsOfUser({ isOwnProfile, userNameParam: userNameParam ?? '' }));\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (!profile) {\n      dispatch(openedOtherProfile({ username: userNameParam }));\n    }\n  }, [profile]);\n\n  if (!profile) {\n    // TODO: Fetch profile.\n    return <h3>Should fetch data here. Will do that later.</h3>;\n  }\n\n  return (\n    <Box {...responsiveBoxProps}>\n      <Box>\n        <Box alignItems='center' display='flex' flexDirection='column' marginTop={8}>\n          <Avatar size='lg' name={profile.username} src={profile.imageURL ?? ''} />\n          <Text color='gray.600' fontWeight='semibold' marginTop={2}>\n            {profile.firstName ? `${profile.firstName} ${profile.lastName}` : profile.username}\n          </Text>\n          <Text color='gray.500'>{profile.cityName}</Text>\n        </Box>\n        <Box color='gray.500' display='flex' justifyContent='center' marginTop={4}>\n          <Box marginRight={6}>\n            <Text textAlign='center'>{profile.postsCount}</Text>\n            <Text>Posts</Text>\n          </Box>\n          <Box>\n            <Text textAlign='center'>{profile.rating}</Text>\n            <Text>Rating</Text>\n          </Box>\n        </Box>\n      </Box>\n      <Divider borderColor='gray.400' />\n      {/* NOTE: Copied. Refactor */}\n      <Box\n        display='grid'\n        gridTemplateColumns={['100%', 'repeat(2, 1fr)', 'repeat(3, 1fr)', 'repeat(4, 1fr)']}\n        gridGap={8}\n        marginTop={8}\n      >\n        {Object.values(posts)\n          .map(({ post }) => post)\n          .map((post) => post && <Post key={post.postID} {...post} detailViewRedirectToProfile />)}\n      </Box>\n      {/* Preliminary */}\n      {isOwnProfile && false && (\n        <Box marginTop={8}>\n          <Button\n            onClick={(): void => {\n              history.push('/account');\n              dispatch(loggedOut());\n            }}\n            variant='ghost'\n            variantColor='green'\n          >\n            Log out\n          </Button>\n        </Box>\n      )}\n    </Box>\n  );\n};\n"],"sourceRoot":""}