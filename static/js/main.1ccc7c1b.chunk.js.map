{"version":3,"sources":["pages/RootPage.tsx","components/DelayedFallback.tsx","app/App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["RootPage","DelayedFallback","useState","show","setShow","useEffect","timeout","setTimeout","clearTimeout","Spinner","label","LoginPage","lazy","then","default","RegistrationPage","App","ThemeProvider","theme","CSSReset","Box","minHeight","padding","display","flexDirection","margin","width","basename","to","path","fallback","slice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","counterReducer","reducer","rootReducer","combineReducers","counter","store","configureStore","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1ccc7c1b.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nexport const RootPage: FC = () => {\n  return <h1>Hello World!</h1>;\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { Spinner } from '@chakra-ui/core';\n\nexport const DelayedFallback: FC = () => {\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => setShow(true), 500);\n    return (): void => {\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  return <>{show && <Spinner label='Loading...' />}</>;\n};\n","import React, { FC, lazy, Suspense } from 'react';\nimport { HashRouter, Link, Route, Switch } from 'react-router-dom';\nimport { Box, CSSReset, theme, ThemeProvider } from '@chakra-ui/core';\n\nimport { RootPage } from '../pages/RootPage';\n\nimport { DelayedFallback } from '../components/DelayedFallback';\n\nconst LoginPage = lazy(() =>\n  import('../pages/LoginPage').then(({ LoginPage }) => ({\n    default: LoginPage,\n  })),\n);\n\nconst RegistrationPage = lazy(() =>\n  import('../pages/RegistrationPage').then(({ RegistrationPage }) => ({\n    default: RegistrationPage,\n  })),\n);\n\nconst ROOT_PATH = '/';\nconst LOGIN_PATH = '/login';\nconst REGISRATION_PATH = '/register';\n\nexport const App: FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <Box minHeight='inherit' padding='2rem'>\n        <Box\n          display='flex'\n          flexDirection='column'\n          margin='0 auto'\n          width={[\n            '100%', // base\n            '90%', // 480px upwards\n            '90%', // 768px upwards\n            '80%', // 992px upwards\n            '70%',\n          ]}\n        >\n          <HashRouter basename='/'>\n            <nav>\n              <ul>\n                <li>\n                  <Link to={ROOT_PATH}>Home</Link>\n                </li>\n                <li>\n                  <Link to={LOGIN_PATH}>Login</Link>\n                </li>\n                <li>\n                  <Link to={REGISRATION_PATH}>Register</Link>\n                </li>\n              </ul>\n            </nav>\n\n            <Switch>\n              <Route path={LOGIN_PATH}>\n                <Suspense fallback={<DelayedFallback />}>\n                  <LoginPage />\n                </Suspense>\n              </Route>\n              <Route path={REGISRATION_PATH}>\n                <Suspense fallback={<DelayedFallback />}>\n                  <RegistrationPage />\n                </Suspense>\n              </Route>\n              <Route path={ROOT_PATH}>\n                <RootPage />\n              </Route>\n            </Switch>\n          </HashRouter>\n        </Box>\n      </Box>\n    </ThemeProvider>\n  );\n};\n","/* eslint-disable */\nimport { createSlice } from '@reduxjs/toolkit';\n\nexport const slice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = slice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount: any) => (dispatch: any) => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectCount = (state: any) => state.counter.value;\n\nexport const counterReducer = slice.reducer;\n/* eslint-enable */\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { counterReducer } from '../features/counter/counterSlice';\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app/App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport { register } from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\nregister();\n"],"sourceRoot":""}