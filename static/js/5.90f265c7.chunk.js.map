{"version":3,"sources":["pages/RegistrationPage.tsx","utils/fetch.ts"],"names":["containerProps","marginTop","RegistrationPage","useState","username","setUsername","email","setEmail","password","setPassword","shouldShowPassword","setShouldShowPassword","isLoading","setIsLoading","errorMessage","setErrorMessage","Box","maxWidth","onSubmit","e","preventDefault","path","options","onStart","window","fetch","fetchOptions","then","response","json","ok","onSuccess","catch","error","onFailure","statusCode","finally","onEnd","body","JSON","stringify","method","data","FormControl","FormLabel","htmlFor","Input","id","isRequired","maxLength","minLength","onChange","target","value","type","InputGroup","size","width","Button","aria-label","height","onClick","variantColor","Alert","status","variant"],"mappings":"kSAeA,IAMMA,EAAiB,CACrBC,UAAW,GAGAC,EAAuB,WAAO,IAAD,EACRC,mBAAS,IADD,mBACjCC,EADiC,KACvBC,EADuB,OAEdF,mBAAS,IAFK,mBAEjCG,EAFiC,KAE1BC,EAF0B,OAGRJ,mBAAS,IAHD,mBAGjCK,EAHiC,KAGvBC,EAHuB,OAKYN,oBAAS,GALrB,mBAKjCO,EALiC,KAKbC,EALa,OAONR,oBAAS,GAPH,mBAOjCS,EAPiC,KAOtBC,EAPsB,OAQAV,mBAAS,IART,mBAQjCW,EARiC,KAQnBC,EARmB,KAUxC,OACE,kBAACC,EAAA,EAAD,CAAKC,SAAS,SACZ,0BACEC,SAAU,SAACC,GACTA,EAAEC,iBCrCL,SACLC,EACAC,GAOgB,IAAD,EACf,UAAAA,EAAQC,eAAR,cAAAD,GAEOE,OACJC,MAfgC,wBAePJ,EAAMC,EAAQI,cACvCC,MAAK,SAACC,GACL,OAAOA,EAASC,OAAOF,MAAK,SAACE,GAC3B,GAAID,EAASE,GACX,OAAOD,EAGT,MAAMA,QAGTF,MAAK,SAACE,GACLP,EAAQS,UAAUF,MAEnBG,OAAM,SAACC,GACNX,EAAQY,UAAU,CAChBpB,aAAcmB,EAAMnB,cAAgB,gCACpCqB,WAAYF,EAAME,YAAc,SAGnCC,SAAQ,WAAO,IAAD,EACb,UAAAd,EAAQe,aAAR,cAAAf,MDMIG,CAAM,QAAS,CACbC,aAAc,CACZY,KAAMC,KAAKC,UAAU,CACnBlC,QACAE,WACAJ,aAEFqC,OAAQ,QAEVlB,QAAS,WACPV,GAAa,IAGfkB,UAAW,SAACW,KACZR,UAAW,YAAuB,IAApBpB,EAAmB,EAAnBA,aACZC,EAAgBD,IAElBuB,MAAO,WACLxB,GAAa,QAKnB,kBAAC8B,EAAA,EAAgB3C,EACf,kBAAC4C,EAAA,EAAD,CAAWC,QAAQ,YAAnB,YACA,kBAACC,EAAA,EAAD,CACEC,GAAG,WACHC,YAAU,EACVC,UArDgB,GAsDhBC,UAvDgB,EAyDhBC,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACX/C,EAAY+C,EAAOC,QAErBC,KAAK,OACLD,MAAOjD,KAGX,kBAACuC,EAAA,EAAgB3C,EACf,kBAAC4C,EAAA,EAAD,CAAWC,QAAQ,SAAnB,iBACA,kBAACC,EAAA,EAAD,CACEE,YAAU,EACVD,GAAG,QAEHI,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACX7C,EAAS6C,EAAOC,QAElBC,KAAK,QACLD,MAAO/C,KAGX,kBAACqC,EAAA,EAAgB3C,EACf,kBAAC4C,EAAA,EAAD,CAAWC,QAAQ,YAAnB,YACA,kBAACU,EAAA,EAAD,CAAYC,KAAK,MACf,kBAACV,EAAA,EAAD,CACEC,GAAG,WACHE,UA9Ec,GA+EdC,UAhFc,EAkFdC,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACX3C,EAAY2C,EAAOC,QAErBA,MAAO7C,EACP8C,KAAM5C,EAAqB,OAAS,aAEtC,kBAAC,IAAD,CAAmB+C,MAAM,UACvB,kBAACC,EAAA,EAAD,CACEC,aAAW,6BACXC,OAAO,MACPJ,KAAK,KACLK,QAAS,WACPlD,GAAuBD,KAGxBA,EAAqB,OAAS,WAKvC,kBAACgD,EAAA,EAAD,CAAQ9C,UAAWA,EAAWX,UAAW,EAAG6D,aAAa,OAAOR,KAAK,UAArE,aAIDxC,GACC,kBAACiD,EAAA,EAAD,CAAO9D,UAAW,EAAG+D,OAAO,QAAQC,QAAQ,eAC1C,kBAACF,EAAA,EAAD,MACCjD","file":"static/js/5.90f265c7.chunk.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport {\n  Alert,\n  AlertIcon,\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n} from '@chakra-ui/core';\n\nimport { fetch } from '../utils/fetch';\n\nconst MIN_LENGTH_USERNAME = 3;\nconst MAX_LENGTH_USERNAME = 16;\n\nconst MIN_LENGTH_PASSWORD = 8;\nconst MAX_LENGTH_PASSWORD = 64;\n\nconst containerProps = {\n  marginTop: 4,\n};\n\nexport const RegistrationPage: FC = () => {\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  return (\n    <Box maxWidth='500px'>\n      <form\n        onSubmit={(e): void => {\n          e.preventDefault();\n\n          fetch('/user', {\n            fetchOptions: {\n              body: JSON.stringify({\n                email,\n                password,\n                username,\n              }),\n              method: 'POST',\n            },\n            onStart: () => {\n              setIsLoading(true);\n            },\n            // eslint-disable-next-line\n            onSuccess: (data: object) => {},\n            onFailure: ({ errorMessage }) => {\n              setErrorMessage(errorMessage);\n            },\n            onEnd: () => {\n              setIsLoading(false);\n            },\n          });\n        }}\n      >\n        <FormControl {...containerProps}>\n          <FormLabel htmlFor='username'>Username</FormLabel>\n          <Input\n            id='username'\n            isRequired\n            maxLength={MAX_LENGTH_USERNAME}\n            minLength={MIN_LENGTH_USERNAME}\n            // @ts-ignore\n            onChange={({ target }): void => {\n              setUsername(target.value);\n            }}\n            type='text'\n            value={username}\n          />\n        </FormControl>\n        <FormControl {...containerProps}>\n          <FormLabel htmlFor='email'>Email address</FormLabel>\n          <Input\n            isRequired\n            id='email'\n            // @ts-ignore\n            onChange={({ target }): void => {\n              setEmail(target.value);\n            }}\n            type='email'\n            value={email}\n          />\n        </FormControl>\n        <FormControl {...containerProps}>\n          <FormLabel htmlFor='password'>Password</FormLabel>\n          <InputGroup size='md'>\n            <Input\n              id='password'\n              maxLength={MAX_LENGTH_PASSWORD}\n              minLength={MIN_LENGTH_PASSWORD}\n              // @ts-ignore\n              onChange={({ target }): void => {\n                setPassword(target.value);\n              }}\n              value={password}\n              type={shouldShowPassword ? 'text' : 'password'}\n            />\n            <InputRightElement width='4.5rem'>\n              <Button\n                aria-label='toggle password visibility'\n                height='75%'\n                size='sm'\n                onClick={(): void => {\n                  setShouldShowPassword(!shouldShowPassword);\n                }}\n              >\n                {shouldShowPassword ? 'Hide' : 'Show'}\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n        </FormControl>\n        <Button isLoading={isLoading} marginTop={6} variantColor='teal' type='submit'>\n          Register\n        </Button>\n      </form>\n      {errorMessage && (\n        <Alert marginTop={6} status='error' variant='left-accent'>\n          <AlertIcon />\n          {errorMessage}\n        </Alert>\n      )}\n    </Box>\n  );\n};\n","const getEndpointURL = (): string => 'http://localhost:8080';\n\nexport function fetch<D>(\n  path: string,\n  options: {\n    fetchOptions: Parameters<typeof window.fetch>[1];\n    onEnd?: () => void;\n    onFailure: (error: { errorMessage: string; statusCode: number }) => void;\n    onStart?: () => void;\n    onSuccess: (data: D) => void;\n  },\n): Promise<void> {\n  options.onStart?.();\n\n  return window\n    .fetch(getEndpointURL() + path, options.fetchOptions)\n    .then((response: Response) => {\n      return response.json().then((json) => {\n        if (response.ok) {\n          return json;\n        }\n\n        throw json;\n      });\n    })\n    .then((json: D) => {\n      options.onSuccess(json);\n    })\n    .catch((error) => {\n      options.onFailure({\n        errorMessage: error.errorMessage || 'An unknown error has occured.',\n        statusCode: error.statusCode || 500,\n      });\n    })\n    .finally(() => {\n      options.onEnd?.();\n    });\n}\n"],"sourceRoot":""}