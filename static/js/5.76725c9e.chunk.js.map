{"version":3,"sources":["features/user/RegistrationPage.tsx","components/PasswordInput.tsx"],"names":["containerStyles","marginTop","RegistrationPage","dispatch","useDispatch","useSelector","selectAsync","error","loading","useState","name","setName","email","setEmail","password","setPassword","isPasswordVisible","setIsPasswordVisible","maxWidth","onSubmit","e","preventDefault","registered","country","htmlFor","id","isRequired","maxLength","minLength","onChange","target","value","type","isLoading","variantColor","status","variant","PasswordInput","size","width","aria-label","height","onClick"],"mappings":"wSAWMA,EAAkB,CACtBC,UAAW,GAGAC,EAAuB,WAClC,IAAMC,EAAWC,cADuB,EAEbC,YAAYC,KAA/BC,EAFgC,EAEhCA,MAAOC,EAFyB,EAEzBA,QAFyB,EAIhBC,mBAAS,IAJO,mBAIjCC,EAJiC,KAI3BC,EAJ2B,OAKdF,mBAAS,IALK,mBAKjCG,EALiC,KAK1BC,EAL0B,OAMRJ,mBAAS,IAND,mBAMjCK,EANiC,KAMvBC,EANuB,OAQUN,oBAAS,GARnB,mBAQjCO,EARiC,KAQdC,EARc,KAUxC,OACE,kBAAC,IAAD,CAAKC,SAAS,SACZ,0BACEC,SAAU,SAACC,GACTA,EAAEC,iBAEFlB,EACEmB,YAAW,CAETC,QAAS,eACTX,QACAF,OACAI,gBAKN,kBAAC,IAAgBd,EACf,kBAAC,IAAD,CAAWwB,QAAQ,YAAnB,YACA,kBAAC,IAAD,CACEC,GAAG,WACHC,YAAU,EACVC,UAtCgB,GAuChBC,UAxCgB,EA0ChBC,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACXnB,EAAQmB,EAAOC,QAEjBC,KAAK,OACLD,MAAOrB,KAGX,kBAAC,IAAgBV,EACf,kBAAC,IAAD,CAAWwB,QAAQ,SAAnB,iBACA,kBAAC,IAAD,CACEE,YAAU,EACVD,GAAG,QAEHI,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACXjB,EAASiB,EAAOC,QAElBC,KAAK,QACLD,MAAOnB,KAGX,kBAAC,IAAD,CACEZ,gBAAiBA,EACjBgB,kBAAmBA,EACnBF,SAAUA,EACVG,qBAAsBA,EACtBF,YAAaA,IAEf,kBAAC,IAAD,CAAQkB,UAAuB,YAAZzB,EAAuBP,UAAW,EAAGiC,aAAa,OAAOF,KAAK,UAAjF,aAIDzB,GACC,kBAAC,IAAD,CAAON,UAAW,EAAGkC,OAAO,QAAQC,QAAQ,eAC1C,kBAAC,IAAD,MACC7B,M,gCCpFX,uGAca8B,EAA2B,SAAC,GAAD,IACtCrC,EADsC,EACtCA,gBACAgB,EAFsC,EAEtCA,kBACAF,EAHsC,EAGtCA,SACAG,EAJsC,EAItCA,qBACAF,EALsC,EAKtCA,YALsC,OAOtC,kBAAC,IAAgBf,EACf,kBAAC,IAAD,CAAWwB,QAAQ,YAAnB,YACA,kBAAC,IAAD,CAAYc,KAAK,MACf,kBAAC,IAAD,CACEb,GAAG,WACHC,YAAU,EACVC,UAvBoB,GAwBpBC,UAzBoB,EA2BpBC,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACXf,EAAYe,EAAOC,QAErBA,MAAOjB,EACPkB,KAAMhB,EAAoB,OAAS,aAErC,kBAAC,IAAD,CAAmBuB,MAAM,UACvB,kBAAC,IAAD,CACEC,aAAW,6BACXC,OAAO,MACPC,QAAS,WACPzB,GAAsBD,IAExBoB,QAAQ,UACRE,KAAK,MAEJtB,EAAoB,OAAS","file":"static/js/5.76725c9e.chunk.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Alert, AlertIcon, Box, Button, FormControl, FormLabel, Input } from '@chakra-ui/core';\n\nimport { registered, selectAsync } from './userSlice';\n\nimport { PasswordInput } from '../../components/PasswordInput';\n\nconst MIN_LENGTH_USERNAME = 3;\nconst MAX_LENGTH_USERNAME = 16;\n\nconst containerStyles = {\n  marginTop: 4,\n};\n\nexport const RegistrationPage: FC = () => {\n  const dispatch = useDispatch();\n  const { error, loading } = useSelector(selectAsync);\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n\n  return (\n    <Box maxWidth='500px'>\n      <form\n        onSubmit={(e): void => {\n          e.preventDefault();\n\n          dispatch(\n            registered({\n              // TODO: Country/City in registration flow\n              country: 'test-country',\n              email,\n              name,\n              password,\n            }),\n          );\n        }}\n      >\n        <FormControl {...containerStyles}>\n          <FormLabel htmlFor='username'>Username</FormLabel>\n          <Input\n            id='username'\n            isRequired\n            maxLength={MAX_LENGTH_USERNAME}\n            minLength={MIN_LENGTH_USERNAME}\n            // @ts-ignore\n            onChange={({ target }): void => {\n              setName(target.value);\n            }}\n            type='text'\n            value={name}\n          />\n        </FormControl>\n        <FormControl {...containerStyles}>\n          <FormLabel htmlFor='email'>Email address</FormLabel>\n          <Input\n            isRequired\n            id='email'\n            // @ts-ignore\n            onChange={({ target }): void => {\n              setEmail(target.value);\n            }}\n            type='email'\n            value={email}\n          />\n        </FormControl>\n        <PasswordInput\n          containerStyles={containerStyles}\n          isPasswordVisible={isPasswordVisible}\n          password={password}\n          setIsPasswordVisible={setIsPasswordVisible}\n          setPassword={setPassword}\n        />\n        <Button isLoading={loading === 'pending'} marginTop={6} variantColor='teal' type='submit'>\n          Register\n        </Button>\n      </form>\n      {error && (\n        <Alert marginTop={6} status='error' variant='left-accent'>\n          <AlertIcon />\n          {error}\n        </Alert>\n      )}\n    </Box>\n  );\n};\n","import React, { FC } from 'react';\nimport { BoxProps, Button, FormControl, FormLabel, Input, InputGroup, InputRightElement } from '@chakra-ui/core';\n\nconst MIN_LENGTH_PASSWORD = 8;\nconst MAX_LENGTH_PASSWORD = 64;\n\ntype Props = {\n  containerStyles: BoxProps;\n  isPasswordVisible: boolean;\n  password: string;\n  setIsPasswordVisible: (isPasswordVisible: Props['isPasswordVisible']) => void;\n  setPassword: (password: Props['password']) => void;\n};\n\nexport const PasswordInput: FC<Props> = ({\n  containerStyles,\n  isPasswordVisible,\n  password,\n  setIsPasswordVisible,\n  setPassword,\n}: Props) => (\n  <FormControl {...containerStyles}>\n    <FormLabel htmlFor='password'>Password</FormLabel>\n    <InputGroup size='md'>\n      <Input\n        id='password'\n        isRequired\n        maxLength={MAX_LENGTH_PASSWORD}\n        minLength={MIN_LENGTH_PASSWORD}\n        // @ts-ignore\n        onChange={({ target }): void => {\n          setPassword(target.value);\n        }}\n        value={password}\n        type={isPasswordVisible ? 'text' : 'password'}\n      />\n      <InputRightElement width='4.5rem'>\n        <Button\n          aria-label='toggle password visibility'\n          height='65%'\n          onClick={(): void => {\n            setIsPasswordVisible(!isPasswordVisible);\n          }}\n          variant='outline'\n          size='sm'\n        >\n          {isPasswordVisible ? 'Hide' : 'Show'}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  </FormControl>\n);\n"],"sourceRoot":""}