{"version":3,"sources":["components/PasswordInput.tsx","utils/fetch.ts","../node_modules/@chakra-ui/core/dist/es/Link/index.js","pages/LoginPage.tsx"],"names":["PasswordInput","containerStyles","isPasswordVisible","password","setIsPasswordVisible","setPassword","htmlFor","size","id","isRequired","maxLength","minLength","onChange","target","value","type","width","aria-label","height","onClick","variant","fetch","path","options","onStart","window","credentials","headers","fetchOptions","then","response","json","ok","onSuccess","catch","error","onFailure","errorMessage","finally","onEnd","baseStyleProps","transition","cursor","textDecoration","outline","_focus","boxShadow","_disabled","opacity","Link","forwardRef","_ref","ref","isDisabled","isExternal","rest","_objectWithoutPropertiesLoose","externalProps","rel","jsx","PseudoBox","_extends","as","tabIndex","undefined","event","preventDefault","_hover","displayName","marginTop","LoginPage","history","useHistory","useState","name","setName","isLoading","setIsLoading","setErrorMessage","Box","maxWidth","onSubmit","e","body","JSON","stringify","method","_data","push","FormControl","FormLabel","Input","display","justifyContent","Button","variantColor","href","Alert","status"],"mappings":"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","file":"static/js/4.c2f8d85b.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { BoxProps, Button, FormControl, FormLabel, Input, InputGroup, InputRightElement } from '@chakra-ui/core';\n\nconst MIN_LENGTH_PASSWORD = 8;\nconst MAX_LENGTH_PASSWORD = 64;\n\ntype Props = {\n  containerStyles: BoxProps;\n  isPasswordVisible: boolean;\n  password: string;\n  setIsPasswordVisible: (isPasswordVisible: Props['isPasswordVisible']) => void;\n  setPassword: (password: Props['password']) => void;\n};\n\nexport const PasswordInput: FC<Props> = ({\n  containerStyles,\n  isPasswordVisible,\n  password,\n  setIsPasswordVisible,\n  setPassword,\n}: Props) => (\n  <FormControl {...containerStyles}>\n    <FormLabel htmlFor='password'>Password</FormLabel>\n    <InputGroup size='md'>\n      <Input\n        id='password'\n        isRequired\n        maxLength={MAX_LENGTH_PASSWORD}\n        minLength={MIN_LENGTH_PASSWORD}\n        // @ts-ignore\n        onChange={({ target }): void => {\n          setPassword(target.value);\n        }}\n        value={password}\n        type={isPasswordVisible ? 'text' : 'password'}\n      />\n      <InputRightElement width='4.5rem'>\n        <Button\n          aria-label='toggle password visibility'\n          height='65%'\n          onClick={(): void => {\n            setIsPasswordVisible(!isPasswordVisible);\n          }}\n          variant='outline'\n          size='sm'\n        >\n          {isPasswordVisible ? 'Hide' : 'Show'}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  </FormControl>\n);\n","const getEndpointURL = (): string => 'http://localhost:8080';\n\nexport function fetch<D>(\n  path: string,\n  options: {\n    fetchOptions: Parameters<typeof window.fetch>[1];\n    onEnd?: () => void;\n    onFailure: (error: { errorMessage: string }) => void;\n    onStart?: () => void;\n    onSuccess: (data: D) => void;\n  },\n): Promise<void> {\n  options.onStart?.();\n\n  return window\n    .fetch(getEndpointURL() + path, {\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...options.fetchOptions,\n    })\n    .then((response: Response) => {\n      return response.json().then((json) => {\n        if (response.ok) {\n          return json;\n        }\n\n        throw json;\n      });\n    })\n    .then((json: D) => {\n      options.onSuccess(json);\n    })\n    .catch((error) => {\n      options.onFailure({\n        errorMessage: error.errorMessage || 'An unknown error has occured.',\n      });\n    })\n    .finally(() => {\n      options.onEnd?.();\n    });\n}\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PseudoBox from \"../PseudoBox\";\nimport { forwardRef } from \"react\";\nvar baseStyleProps = {\n  transition: \"all 0.15s ease-out\",\n  cursor: \"pointer\",\n  textDecoration: \"none\",\n  outline: \"none\",\n  _focus: {\n    boxShadow: \"outline\"\n  },\n  _disabled: {\n    opacity: \"0.4\",\n    cursor: \"not-allowed\",\n    textDecoration: \"none\"\n  }\n};\nvar Link = forwardRef(function (_ref, ref) {\n  var isDisabled = _ref.isDisabled,\n      isExternal = _ref.isExternal,\n      onClick = _ref.onClick,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"isDisabled\", \"isExternal\", \"onClick\"]);\n\n  var externalProps = isExternal ? {\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  } : null;\n  return jsx(PseudoBox, _extends({\n    as: \"a\",\n    ref: ref,\n    tabIndex: isDisabled ? -1 : undefined,\n    \"aria-disabled\": isDisabled,\n    onClick: isDisabled ? function (event) {\n      return event.preventDefault();\n    } : onClick,\n    _hover: {\n      textDecoration: \"underline\"\n    }\n  }, externalProps, baseStyleProps, rest));\n});\nLink.displayName = \"Link\";\nexport default Link;","import React, { FC, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Alert, AlertIcon, Box, Button, FormControl, FormLabel, Input, Link } from '@chakra-ui/core';\n\nimport { PasswordInput } from '../components/PasswordInput';\n\nimport { fetch } from '../utils/fetch';\n\nconst MIN_LENGTH_USERNAME = 3;\nconst MAX_LENGTH_USERNAME = 16;\n\nconst containerStyles = {\n  marginTop: 4,\n};\n\nexport const LoginPage: FC = () => {\n  const history = useHistory();\n\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  return (\n    <Box maxWidth='500px'>\n      <form\n        onSubmit={(e): void => {\n          e.preventDefault();\n\n          fetch('/user/login', {\n            fetchOptions: {\n              body: JSON.stringify({\n                name,\n                password,\n              }),\n              method: 'POST',\n            },\n            onStart: () => {\n              setIsLoading(true);\n            },\n            onSuccess: (_data: { success: boolean; token: string }) => {\n              history.push('/');\n            },\n            onFailure: ({ errorMessage }) => {\n              setErrorMessage(errorMessage);\n            },\n            onEnd: () => {\n              setIsLoading(false);\n            },\n          });\n        }}\n      >\n        <FormControl {...containerStyles}>\n          <FormLabel htmlFor='username'>Username</FormLabel>\n          <Input\n            id='username'\n            isRequired\n            maxLength={MAX_LENGTH_USERNAME}\n            minLength={MIN_LENGTH_USERNAME}\n            // @ts-ignore\n            onChange={({ target }): void => {\n              setName(target.value);\n            }}\n            type='text'\n            value={name}\n          />\n        </FormControl>\n        <PasswordInput\n          containerStyles={containerStyles}\n          isPasswordVisible={isPasswordVisible}\n          password={password}\n          setIsPasswordVisible={setIsPasswordVisible}\n          setPassword={setPassword}\n        />\n        <Box display='flex' justifyContent='space-between' marginTop={6}>\n          <Button isLoading={isLoading} variantColor='teal' type='submit'>\n            Login\n          </Button>\n          {/* TODO: Link */}\n          <Link display='flex' href='/'>\n            <Button variant='link' size='sm'>\n              Forgot password?\n            </Button>\n          </Link>\n        </Box>\n      </form>\n      {errorMessage && (\n        <Alert marginTop={6} status='error' variant='left-accent'>\n          <AlertIcon />\n          {errorMessage}\n        </Alert>\n      )}\n    </Box>\n  );\n};\n"],"sourceRoot":""}