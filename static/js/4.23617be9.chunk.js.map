{"version":3,"sources":["../node_modules/@chakra-ui/core/dist/es/Link/index.js","pages/LoginPage.tsx","components/PasswordInput.tsx","utils/fetch.ts"],"names":["baseStyleProps","transition","cursor","textDecoration","outline","_focus","boxShadow","_disabled","opacity","Link","forwardRef","_ref","ref","isDisabled","isExternal","onClick","rest","_objectWithoutPropertiesLoose","externalProps","target","rel","jsx","PseudoBox","_extends","as","tabIndex","undefined","event","preventDefault","_hover","displayName","containerStyles","marginTop","LoginPage","useState","name","setName","password","setPassword","isPasswordVisible","setIsPasswordVisible","isLoading","setIsLoading","errorMessage","setErrorMessage","Box","maxWidth","onSubmit","e","fetch","fetchOptions","body","JSON","stringify","method","onStart","onSuccess","data","onFailure","onEnd","FormControl","FormLabel","htmlFor","Input","id","isRequired","maxLength","minLength","onChange","value","type","PasswordInput","display","justifyContent","Button","variantColor","href","variant","size","Alert","status","width","aria-label","height","path","options","window","headers","then","response","json","ok","catch","error","finally"],"mappings":"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","file":"static/js/4.23617be9.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport PseudoBox from \"../PseudoBox\";\nimport { forwardRef } from \"react\";\nvar baseStyleProps = {\n  transition: \"all 0.15s ease-out\",\n  cursor: \"pointer\",\n  textDecoration: \"none\",\n  outline: \"none\",\n  _focus: {\n    boxShadow: \"outline\"\n  },\n  _disabled: {\n    opacity: \"0.4\",\n    cursor: \"not-allowed\",\n    textDecoration: \"none\"\n  }\n};\nvar Link = forwardRef(function (_ref, ref) {\n  var isDisabled = _ref.isDisabled,\n      isExternal = _ref.isExternal,\n      onClick = _ref.onClick,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"isDisabled\", \"isExternal\", \"onClick\"]);\n\n  var externalProps = isExternal ? {\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  } : null;\n  return jsx(PseudoBox, _extends({\n    as: \"a\",\n    ref: ref,\n    tabIndex: isDisabled ? -1 : undefined,\n    \"aria-disabled\": isDisabled,\n    onClick: isDisabled ? function (event) {\n      return event.preventDefault();\n    } : onClick,\n    _hover: {\n      textDecoration: \"underline\"\n    }\n  }, externalProps, baseStyleProps, rest));\n});\nLink.displayName = \"Link\";\nexport default Link;","import React, { FC, useState } from 'react';\nimport { Alert, AlertIcon, Box, Button, FormControl, FormLabel, Input, Link } from '@chakra-ui/core';\n\nimport { PasswordInput } from '../components/PasswordInput';\n\nimport { fetch } from '../utils/fetch';\n\nconst MIN_LENGTH_USERNAME = 3;\nconst MAX_LENGTH_USERNAME = 16;\n\nconst containerStyles = {\n  marginTop: 4,\n};\n\nexport const LoginPage: FC = () => {\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  return (\n    <Box maxWidth='500px'>\n      <form\n        onSubmit={(e): void => {\n          e.preventDefault();\n\n          fetch('/user/login', {\n            fetchOptions: {\n              body: JSON.stringify({\n                name,\n                password,\n              }),\n              method: 'POST',\n            },\n            onStart: () => {\n              setIsLoading(true);\n            },\n            // eslint-disable-next-line\n            onSuccess: (data: object) => {},\n            onFailure: ({ errorMessage }) => {\n              setErrorMessage(errorMessage);\n            },\n            onEnd: () => {\n              setIsLoading(false);\n            },\n          });\n        }}\n      >\n        <FormControl {...containerStyles}>\n          <FormLabel htmlFor='username'>Username</FormLabel>\n          <Input\n            id='username'\n            isRequired\n            maxLength={MAX_LENGTH_USERNAME}\n            minLength={MIN_LENGTH_USERNAME}\n            // @ts-ignore\n            onChange={({ target }): void => {\n              setName(target.value);\n            }}\n            type='text'\n            value={name}\n          />\n        </FormControl>\n        <PasswordInput\n          containerStyles={containerStyles}\n          isPasswordVisible={isPasswordVisible}\n          password={password}\n          setIsPasswordVisible={setIsPasswordVisible}\n          setPassword={setPassword}\n        />\n        <Box display='flex' justifyContent='space-between' marginTop={6}>\n          <Button isLoading={isLoading} variantColor='teal' type='submit'>\n            Login\n          </Button>\n          {/* TODO: Link */}\n          <Link display='flex' href='/'>\n            <Button variant='link' size='sm'>\n              Forgot password?\n            </Button>\n          </Link>\n        </Box>\n      </form>\n      {errorMessage && (\n        <Alert marginTop={6} status='error' variant='left-accent'>\n          <AlertIcon />\n          {errorMessage}\n        </Alert>\n      )}\n    </Box>\n  );\n};\n","import React, { FC } from 'react';\nimport { BoxProps, Button, FormControl, FormLabel, Input, InputGroup, InputRightElement } from '@chakra-ui/core';\n\nconst MIN_LENGTH_PASSWORD = 8;\nconst MAX_LENGTH_PASSWORD = 64;\n\ntype Props = {\n  containerStyles: BoxProps;\n  isPasswordVisible: boolean;\n  password: string;\n  setIsPasswordVisible: (isPasswordVisible: Props['isPasswordVisible']) => void;\n  setPassword: (password: Props['password']) => void;\n};\n\nexport const PasswordInput: FC<Props> = ({\n  containerStyles,\n  isPasswordVisible,\n  password,\n  setIsPasswordVisible,\n  setPassword,\n}) => (\n  <FormControl {...containerStyles}>\n    <FormLabel htmlFor='password'>Password</FormLabel>\n    <InputGroup size='md'>\n      <Input\n        id='password'\n        isRequired\n        maxLength={MAX_LENGTH_PASSWORD}\n        minLength={MIN_LENGTH_PASSWORD}\n        // @ts-ignore\n        onChange={({ target }): void => {\n          setPassword(target.value);\n        }}\n        value={password}\n        type={isPasswordVisible ? 'text' : 'password'}\n      />\n      <InputRightElement width='4.5rem'>\n        <Button\n          aria-label='toggle password visibility'\n          height='65%'\n          onClick={(): void => {\n            setIsPasswordVisible(!isPasswordVisible);\n          }}\n          variant='outline'\n          size='sm'\n        >\n          {isPasswordVisible ? 'Hide' : 'Show'}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  </FormControl>\n);\n","const getEndpointURL = (): string => 'http://localhost:8080';\n\nexport function fetch<D>(\n  path: string,\n  options: {\n    fetchOptions: Parameters<typeof window.fetch>[1];\n    onEnd?: () => void;\n    onFailure: (error: { errorMessage: string }) => void;\n    onStart?: () => void;\n    onSuccess: (data: D) => void;\n  },\n): Promise<void> {\n  options.onStart?.();\n\n  return window\n    .fetch(getEndpointURL() + path, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...options.fetchOptions,\n    })\n    .then((response: Response) => {\n      return response.json().then((json) => {\n        if (response.ok) {\n          return json;\n        }\n\n        throw json;\n      });\n    })\n    .then((json: D) => {\n      options.onSuccess(json);\n    })\n    .catch((error) => {\n      options.onFailure({\n        errorMessage: error.errorMessage || 'An unknown error has occured.',\n      });\n    })\n    .finally(() => {\n      options.onEnd?.();\n    });\n}\n"],"sourceRoot":""}