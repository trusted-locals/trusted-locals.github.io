{"version":3,"sources":["app/router.ts","utils/fetch.ts","features/user/userSlice.ts","features/feed/FeedPage.tsx","components/DelayedFallback.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["ROUTER_BASENAME","history","createHashHistory","basename","DEFAULT_OPTIONS","credentials","headers","fetch","path","options","window","then","response","json","ok","catch","error","Error","errorMessage","loggedIn","createAsyncThunk","body","JSON","stringify","method","data","push","registered","slice","createSlice","name","initialState","async","loading","reducers","extraReducers","pending","type","state","fulfilled","_action","rejected","action","message","selectAsync","createSelector","user","userReducer","reducer","FeedPage","DelayedFallback","useState","show","setShow","useEffect","timeout","setTimeout","clearTimeout","Spinner","label","LoginPage","lazy","default","RegistrationPage","App","ThemeProvider","theme","CSSReset","Box","minHeight","padding","display","flexDirection","margin","width","to","fallback","rootReducer","combineReducers","store","configureStore","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.04412bf3.chunk.js","sourcesContent":["import { createHashHistory } from 'history';\n\nexport const ROUTER_BASENAME = '/';\n\nexport const history = createHashHistory({ basename: ROUTER_BASENAME });\n","const DEFAULT_OPTIONS: Parameters<typeof window.fetch>[1] = {\n  credentials: 'include',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n\nconst ENDPOINT_URL = 'http://localhost:8080';\n\ntype ErrorType = {\n  errorMessage: string;\n};\n\nexport function fetch<D>(path: string, options?: object): Promise<D | ErrorType> {\n  return window\n    .fetch(ENDPOINT_URL + path, {\n      ...DEFAULT_OPTIONS,\n      ...options,\n    })\n    .then((response: Response) => {\n      return response.json().then((json) => {\n        if (response.ok) {\n          return json;\n        }\n\n        throw json;\n      });\n    })\n    .catch((error) => {\n      throw new Error(error.errorMessage || 'An unknown error has occured.');\n    });\n}\n","import { createAsyncThunk, createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { history } from '../../app/router';\n\nimport { fetch } from '../../utils/fetch';\n\nimport { RootState } from '../../app/store';\n\ntype AsyncState = {\n  error: string | null;\n  loading: 'idle' | 'pending';\n};\n\ntype State = {\n  async: AsyncState;\n};\n\nconst SLICE_NAME = 'user';\n\ntype LoginBody = {\n  name: string;\n  password: string;\n};\n\ntype LoginSuccess = {\n  success: boolean;\n  token: string;\n};\n\ntype RegistrationBody = {\n  country: string;\n  email: string;\n  name: string;\n  password: string;\n};\n\ntype RegistrationSuccess = {\n  success: boolean;\n};\n\nexport const loggedIn = createAsyncThunk(`${SLICE_NAME}/loggedIn`, (body: LoginBody) =>\n  fetch<LoginSuccess>('/user/login', {\n    body: JSON.stringify(body),\n    method: 'POST',\n  }).then((data) => {\n    history.push('/');\n    return data;\n  }),\n);\n\nexport const registered = createAsyncThunk(`${SLICE_NAME}/registered`, (body: RegistrationBody) =>\n  fetch<RegistrationSuccess>('/user', {\n    body: JSON.stringify(body),\n    method: 'POST',\n  }).then((data) => {\n    history.push('/');\n    return data;\n  }),\n);\n\nexport const slice = createSlice({\n  name: SLICE_NAME,\n  initialState: {\n    async: {\n      error: null,\n      loading: 'idle',\n    },\n  } as State,\n  reducers: {},\n  extraReducers: {\n    [loggedIn.pending.type]: (state): void => {\n      if (state.async.loading === 'idle') {\n        state.async.loading = 'pending';\n      }\n    },\n    [loggedIn.fulfilled.type]: (state, _action: PayloadAction<LoginSuccess>): void => {\n      if (state.async.loading === 'pending') {\n        state.async.loading = 'idle';\n      }\n    },\n    [loggedIn.rejected.type]: (state, action: { error: Error }): void => {\n      if (state.async.loading === 'pending') {\n        state.async.loading = 'idle';\n        state.async.error = action.error.message;\n      }\n    },\n    [registered.pending.type]: (state): void => {\n      if (state.async.loading === 'idle') {\n        state.async.loading = 'pending';\n      }\n    },\n    [registered.fulfilled.type]: (state, _action: PayloadAction<RegistrationSuccess>): void => {\n      if (state.async.loading === 'pending') {\n        state.async.loading = 'idle';\n      }\n    },\n    [registered.rejected.type]: (state, action: { error: Error }): void => {\n      if (state.async.loading === 'pending') {\n        state.async.loading = 'idle';\n        state.async.error = action.error.message;\n      }\n    },\n  },\n});\n\nexport const selectAsync = (state: RootState): State['async'] =>\n  createSelector(\n    (state: RootState) => state.user.async,\n    (async) => async,\n  )(state);\n\nexport const userReducer = slice.reducer;\n","import React, { FC } from 'react';\n\nexport const FeedPage: FC = () => {\n  return <h1>The feed will be shown here</h1>;\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { Spinner } from '@chakra-ui/core';\n\nexport const DelayedFallback: FC = () => {\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => setShow(true), 500);\n    return (): void => {\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  return <>{show && <Spinner label='Loading...' />}</>;\n};\n","import React, { FC, lazy, Suspense } from 'react';\nimport { HashRouter, Link, Route, Switch } from 'react-router-dom';\nimport { Box, CSSReset, theme, ThemeProvider } from '@chakra-ui/core';\n\nimport { FeedPage } from '../features/feed/FeedPage';\n\nimport { DelayedFallback } from '../components/DelayedFallback';\n\nimport { ROUTER_BASENAME } from './router';\n\nconst LoginPage = lazy(() =>\n  import('../features/user/LoginPage').then(({ LoginPage }) => ({\n    default: LoginPage,\n  })),\n);\n\nconst RegistrationPage = lazy(() =>\n  import('../features/user/RegistrationPage').then(({ RegistrationPage }) => ({\n    default: RegistrationPage,\n  })),\n);\n\nconst ROOT_PATH = '/';\nconst LOGIN_PATH = '/login';\nconst REGISRATION_PATH = '/register';\n\nexport const App: FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <Box minHeight='inherit' padding='2rem'>\n        <Box\n          display='flex'\n          flexDirection='column'\n          margin='0 auto'\n          width={[\n            '100%', // base\n            '90%', // 480px upwards\n            '90%', // 768px upwards\n            '80%', // 992px upwards\n            '70%',\n          ]}\n        >\n          <HashRouter basename={ROUTER_BASENAME}>\n            <nav>\n              <ul>\n                <li>\n                  <Link to={ROOT_PATH}>Home</Link>\n                </li>\n                <li>\n                  <Link to={LOGIN_PATH}>Login</Link>\n                </li>\n                <li>\n                  <Link to={REGISRATION_PATH}>Register</Link>\n                </li>\n              </ul>\n            </nav>\n\n            <Switch>\n              <Route path={LOGIN_PATH}>\n                <Suspense fallback={<DelayedFallback />}>\n                  <LoginPage />\n                </Suspense>\n              </Route>\n              <Route path={REGISRATION_PATH}>\n                <Suspense fallback={<DelayedFallback />}>\n                  <RegistrationPage />\n                </Suspense>\n              </Route>\n              <Route path={ROOT_PATH}>\n                <FeedPage />\n              </Route>\n            </Switch>\n          </HashRouter>\n        </Box>\n      </Box>\n    </ThemeProvider>\n  );\n};\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { userReducer } from '../features/user/userSlice';\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app/App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport { register } from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\nregister();\n"],"sourceRoot":""}