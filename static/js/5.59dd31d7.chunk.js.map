{"version":3,"sources":["components/PasswordInput.tsx","utils/fetch.ts","pages/RegistrationPage.tsx"],"names":["PasswordInput","containerStyles","isPasswordVisible","password","setIsPasswordVisible","setPassword","htmlFor","size","id","isRequired","maxLength","minLength","onChange","target","value","type","width","aria-label","height","onClick","variant","fetch","path","options","onStart","window","credentials","headers","fetchOptions","then","response","json","ok","onSuccess","catch","error","onFailure","errorMessage","finally","onEnd","marginTop","RegistrationPage","history","useHistory","useState","name","setName","email","setEmail","isLoading","setIsLoading","setErrorMessage","maxWidth","onSubmit","e","preventDefault","body","JSON","stringify","country","method","_data","push","variantColor","status"],"mappings":"yIAAA,uGAcaA,EAA2B,SAAC,GAAD,IACtCC,EADsC,EACtCA,gBACAC,EAFsC,EAEtCA,kBACAC,EAHsC,EAGtCA,SACAC,EAJsC,EAItCA,qBACAC,EALsC,EAKtCA,YALsC,OAOtC,kBAAC,IAAgBJ,EACf,kBAAC,IAAD,CAAWK,QAAQ,YAAnB,YACA,kBAAC,IAAD,CAAYC,KAAK,MACf,kBAAC,IAAD,CACEC,GAAG,WACHC,YAAU,EACVC,UAvBoB,GAwBpBC,UAzBoB,EA2BpBC,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACXR,EAAYQ,EAAOC,QAErBA,MAAOX,EACPY,KAAMb,EAAoB,OAAS,aAErC,kBAAC,IAAD,CAAmBc,MAAM,UACvB,kBAAC,IAAD,CACEC,aAAW,6BACXC,OAAO,MACPC,QAAS,WACPf,GAAsBF,IAExBkB,QAAQ,UACRb,KAAK,MAEJL,EAAoB,OAAS,a,8EC5CjC,SAASmB,EACdC,EACAC,GAOgB,IAAD,EAGf,OAFA,UAAAA,EAAQC,eAAR,cAAAD,GAEOE,OACJJ,MAfgC,wBAePC,EADrB,aAEHI,YAAa,UACbC,QAAS,CACP,eAAgB,qBAEfJ,EAAQK,eAEZC,MAAK,SAACC,GACL,OAAOA,EAASC,OAAOF,MAAK,SAACE,GAC3B,GAAID,EAASE,GACX,OAAOD,EAGT,MAAMA,QAGTF,MAAK,SAACE,GACLR,EAAQU,UAAUF,MAEnBG,OAAM,SAACC,GACNZ,EAAQa,UAAU,CAChBC,aAAcF,EAAME,cAAgB,qCAGvCC,SAAQ,WAAO,IAAD,EACb,UAAAf,EAAQgB,aAAR,cAAAhB,Q,8LC7BAtB,EAAkB,CACtBuC,UAAW,GAGAC,EAAuB,WAClC,IAAMC,EAAUC,cADwB,EAGhBC,mBAAS,IAHO,mBAGjCC,EAHiC,KAG3BC,EAH2B,OAIdF,mBAAS,IAJK,mBAIjCG,EAJiC,KAI1BC,EAJ0B,OAKRJ,mBAAS,IALD,mBAKjCzC,EALiC,KAKvBE,EALuB,OAOUuC,oBAAS,GAPnB,mBAOjC1C,EAPiC,KAOdE,EAPc,OASNwC,oBAAS,GATH,mBASjCK,EATiC,KAStBC,EATsB,OAUAN,mBAAS,IAVT,mBAUjCP,EAViC,KAUnBc,EAVmB,KAYxC,OACE,kBAAC,IAAD,CAAKC,SAAS,SACZ,0BACEC,SAAU,SAACC,GACTA,EAAEC,iBAEFlC,YAAM,QAAS,CACbO,aAAc,CACZ4B,KAAMC,KAAKC,UAAU,CAEnBC,QAAS,eACTZ,QACAF,OACA1C,aAEFyD,OAAQ,QAEVpC,QAAS,WACP0B,GAAa,IAEfjB,UAAW,SAAC4B,GACVnB,EAAQoB,KAAK,MAEf1B,UAAW,YAAuB,IAApBC,EAAmB,EAAnBA,aACZc,EAAgBd,IAElBE,MAAO,WACLW,GAAa,QAKnB,kBAAC,IAAgBjD,EACf,kBAAC,IAAD,CAAWK,QAAQ,YAAnB,YACA,kBAAC,IAAD,CACEE,GAAG,WACHC,YAAU,EACVC,UAvDgB,GAwDhBC,UAzDgB,EA2DhBC,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACXiC,EAAQjC,EAAOC,QAEjBC,KAAK,OACLD,MAAO+B,KAGX,kBAAC,IAAgB5C,EACf,kBAAC,IAAD,CAAWK,QAAQ,SAAnB,iBACA,kBAAC,IAAD,CACEG,YAAU,EACVD,GAAG,QAEHI,SAAU,YAAuB,IAApBC,EAAmB,EAAnBA,OACXmC,EAASnC,EAAOC,QAElBC,KAAK,QACLD,MAAOiC,KAGX,kBAAC,IAAD,CACE9C,gBAAiBA,EACjBC,kBAAmBA,EACnBC,SAAUA,EACVC,qBAAsBA,EACtBC,YAAaA,IAEf,kBAAC,IAAD,CAAQ4C,UAAWA,EAAWT,UAAW,EAAGuB,aAAa,OAAOhD,KAAK,UAArE,aAIDsB,GACC,kBAAC,IAAD,CAAOG,UAAW,EAAGwB,OAAO,QAAQ5C,QAAQ,eAC1C,kBAAC,IAAD,MACCiB","file":"static/js/5.59dd31d7.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { BoxProps, Button, FormControl, FormLabel, Input, InputGroup, InputRightElement } from '@chakra-ui/core';\n\nconst MIN_LENGTH_PASSWORD = 8;\nconst MAX_LENGTH_PASSWORD = 64;\n\ntype Props = {\n  containerStyles: BoxProps;\n  isPasswordVisible: boolean;\n  password: string;\n  setIsPasswordVisible: (isPasswordVisible: Props['isPasswordVisible']) => void;\n  setPassword: (password: Props['password']) => void;\n};\n\nexport const PasswordInput: FC<Props> = ({\n  containerStyles,\n  isPasswordVisible,\n  password,\n  setIsPasswordVisible,\n  setPassword,\n}: Props) => (\n  <FormControl {...containerStyles}>\n    <FormLabel htmlFor='password'>Password</FormLabel>\n    <InputGroup size='md'>\n      <Input\n        id='password'\n        isRequired\n        maxLength={MAX_LENGTH_PASSWORD}\n        minLength={MIN_LENGTH_PASSWORD}\n        // @ts-ignore\n        onChange={({ target }): void => {\n          setPassword(target.value);\n        }}\n        value={password}\n        type={isPasswordVisible ? 'text' : 'password'}\n      />\n      <InputRightElement width='4.5rem'>\n        <Button\n          aria-label='toggle password visibility'\n          height='65%'\n          onClick={(): void => {\n            setIsPasswordVisible(!isPasswordVisible);\n          }}\n          variant='outline'\n          size='sm'\n        >\n          {isPasswordVisible ? 'Hide' : 'Show'}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  </FormControl>\n);\n","const getEndpointURL = (): string => 'http://localhost:8080';\n\nexport function fetch<D>(\n  path: string,\n  options: {\n    fetchOptions: Parameters<typeof window.fetch>[1];\n    onEnd?: () => void;\n    onFailure: (error: { errorMessage: string }) => void;\n    onStart?: () => void;\n    onSuccess: (data: D) => void;\n  },\n): Promise<void> {\n  options.onStart?.();\n\n  return window\n    .fetch(getEndpointURL() + path, {\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...options.fetchOptions,\n    })\n    .then((response: Response) => {\n      return response.json().then((json) => {\n        if (response.ok) {\n          return json;\n        }\n\n        throw json;\n      });\n    })\n    .then((json: D) => {\n      options.onSuccess(json);\n    })\n    .catch((error) => {\n      options.onFailure({\n        errorMessage: error.errorMessage || 'An unknown error has occured.',\n      });\n    })\n    .finally(() => {\n      options.onEnd?.();\n    });\n}\n","import React, { FC, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Alert, AlertIcon, Box, Button, FormControl, FormLabel, Input } from '@chakra-ui/core';\n\nimport { PasswordInput } from '../components/PasswordInput';\n\nimport { fetch } from '../utils/fetch';\n\nconst MIN_LENGTH_USERNAME = 3;\nconst MAX_LENGTH_USERNAME = 16;\n\nconst containerStyles = {\n  marginTop: 4,\n};\n\nexport const RegistrationPage: FC = () => {\n  const history = useHistory();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  return (\n    <Box maxWidth='500px'>\n      <form\n        onSubmit={(e): void => {\n          e.preventDefault();\n\n          fetch('/user', {\n            fetchOptions: {\n              body: JSON.stringify({\n                // TODO: Country/City in registration flow\n                country: 'test-country',\n                email,\n                name,\n                password,\n              }),\n              method: 'POST',\n            },\n            onStart: () => {\n              setIsLoading(true);\n            },\n            onSuccess: (_data: { success: boolean }) => {\n              history.push('/');\n            },\n            onFailure: ({ errorMessage }) => {\n              setErrorMessage(errorMessage);\n            },\n            onEnd: () => {\n              setIsLoading(false);\n            },\n          });\n        }}\n      >\n        <FormControl {...containerStyles}>\n          <FormLabel htmlFor='username'>Username</FormLabel>\n          <Input\n            id='username'\n            isRequired\n            maxLength={MAX_LENGTH_USERNAME}\n            minLength={MIN_LENGTH_USERNAME}\n            // @ts-ignore\n            onChange={({ target }): void => {\n              setName(target.value);\n            }}\n            type='text'\n            value={name}\n          />\n        </FormControl>\n        <FormControl {...containerStyles}>\n          <FormLabel htmlFor='email'>Email address</FormLabel>\n          <Input\n            isRequired\n            id='email'\n            // @ts-ignore\n            onChange={({ target }): void => {\n              setEmail(target.value);\n            }}\n            type='email'\n            value={email}\n          />\n        </FormControl>\n        <PasswordInput\n          containerStyles={containerStyles}\n          isPasswordVisible={isPasswordVisible}\n          password={password}\n          setIsPasswordVisible={setIsPasswordVisible}\n          setPassword={setPassword}\n        />\n        <Button isLoading={isLoading} marginTop={6} variantColor='teal' type='submit'>\n          Register\n        </Button>\n      </form>\n      {errorMessage && (\n        <Alert marginTop={6} status='error' variant='left-accent'>\n          <AlertIcon />\n          {errorMessage}\n        </Alert>\n      )}\n    </Box>\n  );\n};\n"],"sourceRoot":""}