{"version":3,"sources":["components/PasswordInput.tsx","../node_modules/@chakra-ui/core/dist/es/FormLabel/index.js","features/user/Registration.tsx"],"names":["PasswordInput","containerStyles","isPasswordVisible","password","setIsPasswordVisible","setPassword","htmlFor","size","id","isRequired","maxLength","minLength","onChange","target","value","type","width","aria-label","height","icon","onClick","title","variant","RequiredIndicator","props","colorMode","useColorMode","jsx","Box","_extends","as","ml","color","light","dark","children","FormLabel","forwardRef","_ref","ref","_objectWithoutPropertiesLoose","formControl","useFormControl","fontSize","pr","pb","opacity","isDisabled","fontWeight","textAlign","verticalAlign","display","displayName","marginTop","Registration","withRouter","dispatch","useDispatch","useSelector","selectAsync","error","loading","useState","name","setName","email","setEmail","responsiveBoxProps","maxWidth","onSubmit","e","preventDefault","registered","country","isLoading","variantColor","status","to"],"mappings":"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","file":"static/js/4.015e963b.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { BoxProps, FormControl, FormLabel, IconButton, Input, InputGroup, InputRightElement } from '@chakra-ui/core';\n\nconst MIN_LENGTH_PASSWORD = 8;\nconst MAX_LENGTH_PASSWORD = 64;\n\ntype Props = {\n  containerStyles: BoxProps;\n  isPasswordVisible: boolean;\n  password: string;\n  setIsPasswordVisible: (isPasswordVisible: Props['isPasswordVisible']) => void;\n  setPassword: (password: Props['password']) => void;\n};\n\nexport const PasswordInput: FC<Props> = ({\n  containerStyles,\n  isPasswordVisible,\n  password,\n  setIsPasswordVisible,\n  setPassword,\n}: Props) => (\n  <FormControl {...containerStyles}>\n    <FormLabel htmlFor='password'>Password</FormLabel>\n    <InputGroup size='md'>\n      <Input\n        id='password'\n        isRequired\n        maxLength={MAX_LENGTH_PASSWORD}\n        minLength={MIN_LENGTH_PASSWORD}\n        // @ts-ignore\n        onChange={({ target }): void => {\n          setPassword(target.value);\n        }}\n        value={password}\n        type={isPasswordVisible ? 'text' : 'password'}\n      />\n      <InputRightElement width='4.5rem'>\n        <IconButton\n          aria-label={isPasswordVisible ? 'hide password' : 'show password'}\n          height='65%'\n          // @ts-ignore\n          icon={isPasswordVisible ? 'ioMdEyeOff' : 'ioMdEye'}\n          onClick={(): void => {\n            setIsPasswordVisible(!isPasswordVisible);\n          }}\n          title={isPasswordVisible ? 'Hide password' : 'Show password'}\n          variant='outline'\n          size='sm'\n        />\n      </InputRightElement>\n    </InputGroup>\n  </FormControl>\n);\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport { forwardRef } from \"react\";\nimport Box from \"../Box\";\nimport { useFormControl } from \"../FormControl\";\nimport { useColorMode } from \"../ColorModeProvider\";\nexport var RequiredIndicator = function RequiredIndicator(props) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var color = {\n    light: \"red.500\",\n    dark: \"red.300\"\n  };\n  return jsx(Box, _extends({\n    as: \"span\",\n    ml: 1,\n    color: color[colorMode],\n    \"aria-hidden\": \"true\",\n    children: \"*\"\n  }, props));\n};\nexport var FormLabel = forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\"]);\n\n  var formControl = useFormControl(props);\n  return jsx(Box, _extends({\n    ref: ref,\n    fontSize: \"md\",\n    pr: \"12px\",\n    pb: \"4px\",\n    opacity: formControl.isDisabled ? \"0.4\" : \"1\",\n    fontWeight: \"medium\",\n    textAlign: \"left\",\n    verticalAlign: \"middle\",\n    display: \"inline-block\",\n    as: \"label\"\n  }, props), children, formControl.isRequired && jsx(RequiredIndicator, null));\n});\nFormLabel.displayName = \"FormLabel\";\nexport default FormLabel;","import React, { FC, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link as RouterLink, withRouter } from 'react-router-dom';\nimport { Alert, AlertIcon, Box, Button, FormControl, FormLabel, Heading, Input, Link } from '@chakra-ui/core';\n\nimport { registered, selectAsync } from './userSlice';\n\nimport { PasswordInput } from '../../components/PasswordInput';\n\nimport { responsiveBoxProps } from '../../app/styles';\n\nimport { AppRoutes } from '../../app/router';\n\nconst MIN_LENGTH_USERNAME = 3;\nconst MAX_LENGTH_USERNAME = 16;\n\nconst containerStyles = {\n  marginTop: 4,\n};\n\nconst PureRegistration: FC<{}> = () => {\n  const dispatch = useDispatch();\n  const { error, loading } = useSelector(selectAsync);\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n\n  return (\n    <Box {...responsiveBoxProps} maxWidth='500px'>\n      <Heading as='h2'>Register</Heading>\n      <Box marginTop={8}>\n        <form\n          onSubmit={(e): void => {\n            e.preventDefault();\n\n            dispatch(\n              registered({\n                // TODO: Country/City in registration flow\n                country: 'test-country',\n                email,\n                name,\n                password,\n              }),\n            );\n          }}\n        >\n          <FormControl {...containerStyles}>\n            <FormLabel htmlFor='username'>Username</FormLabel>\n            <Input\n              id='username'\n              isRequired\n              maxLength={MAX_LENGTH_USERNAME}\n              minLength={MIN_LENGTH_USERNAME}\n              // @ts-ignore\n              onChange={({ target }): void => {\n                setName(target.value);\n              }}\n              type='text'\n              value={name}\n            />\n          </FormControl>\n          <FormControl {...containerStyles}>\n            <FormLabel htmlFor='email'>Email address</FormLabel>\n            <Input\n              isRequired\n              id='email'\n              // @ts-ignore\n              onChange={({ target }): void => {\n                setEmail(target.value);\n              }}\n              type='email'\n              value={email}\n            />\n          </FormControl>\n          <PasswordInput\n            containerStyles={containerStyles}\n            isPasswordVisible={isPasswordVisible}\n            password={password}\n            setIsPasswordVisible={setIsPasswordVisible}\n            setPassword={setPassword}\n          />\n          <Button isLoading={loading === 'pending'} marginTop={6} type='submit' variantColor='green'>\n            Register\n          </Button>\n        </form>\n        {error && (\n          <Alert marginTop={6} status='error' variant='left-accent'>\n            <AlertIcon />\n            {error}\n          </Alert>\n        )}\n      </Box>\n      <Box marginTop={12}>\n        Already have an account?{' '}\n        <RouterLink to={'/account/login' as AppRoutes}>\n          <Link as='span' color='green.500' fontWeight='semibold'>\n            Login here.\n          </Link>\n        </RouterLink>\n      </Box>\n    </Box>\n  );\n};\n\nexport const Registration = withRouter(PureRegistration);\n"],"sourceRoot":""}